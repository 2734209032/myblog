(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{390:function(s,a,t){s.exports=t.p+"assets/img/image-20230707213244822.5ae5b8e0.png"},391:function(s,a,t){s.exports=t.p+"assets/img/image-20230707213254435.312d28a6.png"},392:function(s,a,t){s.exports=t.p+"assets/img/image-20230707213323721.823ffbfd.png"},393:function(s,a,t){s.exports=t.p+"assets/img/image-20230707213358803.f9a82e6d.png"},394:function(s,a,t){s.exports=t.p+"assets/img/image-20230707213419094.1d55850a.png"},395:function(s,a,t){s.exports=t.p+"assets/img/image-20230707213500086.9598bb5e.png"},474:function(s,a,t){"use strict";t.r(a);var n=t(4),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"_1-编译器和解释器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-编译器和解释器"}},[s._v("#")]),s._v(" 1.编译器和解释器")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("之所以存在编译器和解释器，是因为机器不能直接理解我们所写的代码，所以在执行程序之\n前，需要将我们所写的代码“翻译”成机器能读懂的机器语言。按语言的执行流程，可以把\n语言划分为编译型语言和解释型语言。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("编译型语言在程序执行之前，需要经过编译器的编译过程，并且编译之后会直接保留机器能\n读懂的二进制文件，这样每次运行程序时，都可以直接运行该二进制文件，而不需要再次重\n新编译了。比如 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("C")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("C")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("、"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("GO")]),s._v(" 等都是编译型语言。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("而由解释型语言编写的程序，在每次运行时都需要通过解释器对程序进行动态解释和执行。\n比如 Python、JavaScript 等都属于解释型语言。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[n("img",{attrs:{src:t(390),alt:"Algolia搜索"}})]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("区别：\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 在编译型语言的编译过程中，编译器首先会依次对源代码进行词法分析、语法分析，生\n成抽象语法树（"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("AST")]),s._v("），然后是优化代码，最后再生成处理器能够理解的机器码。如果\n编译成功，将会生成一个可执行的文件。但如果编译过程发生了语法或者其他的错误，\n那么编译器就会抛出异常，最后的二进制文件也不会生成成功。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 在解释型语言的解释过程中，同样解释器也会对源代码进行词法分析、语法分析，并生\n成抽象语法树（"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("AST")]),s._v("），不过它会再基于抽象语法树生成字节码，最后再根据字节码来\n执行程序、输出结果。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h2",{attrs:{id:"_2-v8是如何执行一段代码的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-v8是如何执行一段代码的"}},[s._v("#")]),s._v(" 2. v8是如何执行一段代码的")]),s._v(" "),n("p",[n("img",{attrs:{src:t(391),alt:"Algolia搜索"}})]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("从图中可以清楚地看到，"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("V8")]),s._v(" 在执行过程中既有解释器 Ignition，又有编译器 TurboFan，\n那么它们是如何配合去执行一段 JavaScript 代码的呢"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"_2-1生成抽象语法树-ast-和执行上下文"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1生成抽象语法树-ast-和执行上下文"}},[s._v("#")]),s._v(" 2.1生成抽象语法树（AST）和执行上下文")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("将源代码转换为抽象语法树，并生成执行上下文\n高级语言是开发者可以理解的语言，但是让编译器或者解释器来理解就非常困难了。对于编\n译器或者解释器来说，它们可以理解的就是 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("AST")]),s._v(" 了。所以无论你使用的是解释型语言还是\n编译型语言，在编译过程中，它们都会生成一个 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("AST")]),s._v("。这和渲染引擎将 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTML")]),s._v(" 格式文件转\n换为计算机可以理解的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DOM")]),s._v(" 树的情况类似。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" myName "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('" 极客时间 "')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("23")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nmyName "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"geektime"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("上面代码经过javascript"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("ast站点处理后，生成的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("AST")]),s._v(" 结构如下：\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[n("img",{attrs:{src:t(392),alt:"Algolia搜索"}})]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("从图中可以看出，"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("AST")]),s._v(" 的结构和代码的结构非常相似，其实你也可以把 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("AST")]),s._v(" 看成代码的结\n构化的表示，编译器或者解释器后续的工作都需要依赖于 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("AST")]),s._v("，而不是源代码。\n"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("AST")]),s._v(" 是非常重要的一种数据结构，在很多项目中有着广泛的应用。其中最著名的一个项目\n是 Babel。Babel 是一个被广泛使用的代码转码器，可以将 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ES6")]),s._v(" 代码转为 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ES5")]),s._v(" 代码，这意\n味着你可以现在就用 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ES6")]),s._v(" 编写程序，而不用担心现有环境是否支持 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ES6")]),s._v("。Babel 的工作原\n理就是先将 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ES6")]),s._v(" 源码转换为 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("AST")]),s._v("，然后再将 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ES6")]),s._v(" 语法的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("AST")]),s._v(" 转换为 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ES5")]),s._v(" 语法的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("AST")]),s._v("，最\n后利用 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ES5")]),s._v(" 的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("AST")]),s._v(" 生成 JavaScript 源代码。\n除了 Babel 外，还有 ESLint 也使用 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("AST")]),s._v("。ESLint 是一个用来检查 JavaScript 编写规范的\n插件，其检测流程也是需要将源码转换为 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("AST")]),s._v("，然后再利用 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("AST")]),s._v(" 来检查代码规范化的问\n题。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h4",{attrs:{id:"_2-1-1怎么生成ast"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1怎么生成ast"}},[s._v("#")]),s._v(" 2.1.1怎么生成AST")]),s._v(" "),n("p",[n("strong",[s._v("一.分词阶段")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("又称为词法分析，其作用是将一行行的源码拆解成一个个\ntoken。所谓token，指的是语法上不可能再分的、最小的单个字符或字符串。你可以参考\n下图来更好地理解什么 token。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("img",{attrs:{src:t(393),alt:"Algolia搜索"}})]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("从图中可以看出，通过"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" myName "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" “极客时间”简单地定义了一个变量，其中关键\n字“"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v("”、标识符“myName” 、赋值运算符“"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("”、字符串“极客时间”四个都是\ntoken，而且它们代表的属性还不一样。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("strong",[s._v("二.解析阶段")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("又称为语法分析，其作用是将上一步生成的 token 数据，根\n据语法规则转为 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("AST")]),s._v("。如果源码符合语法规则，这一步就会顺利完成。但如果源码存在语\n法错误，这一步就会终止，并抛出一个“语法错误”。\n这就是 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("AST")]),s._v(" 的生成过程，先分词，再解析。 有了 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("AST")]),s._v(" 后，那接下来 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("V8")]),s._v(" 就会生成该段代码的执行上下文。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h3",{attrs:{id:"_2-2生成字节码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2生成字节码"}},[s._v("#")]),s._v(" 2.2生成字节码")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("有了 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("AST")]),s._v(" 和执行上下文后，那接下来的第二步，解释器 Ignition 就登场了，它会根据 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("AST")]),s._v("\n生成字节码，并解释执行字节码。\n其实一开始 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("V8")]),s._v(" 并没有字节码，而是直接将 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("AST")]),s._v(" 转换为机器码，由于执行机器码的效率是\n非常高效的，所以这种方式在发布后的一段时间内运行效果是非常好的。但是随着\nChrome 在手机上的广泛普及，特别是运行在 512M 内存的手机上，内存占用问题也暴露\n出来了，因为 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("V8")]),s._v(" 需要消耗大量的内存来存放转换后的机器码。为了解决内存占用问题，\n"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("V8")]),s._v(" 团队大幅重构了引擎架构，引入字节码，并且抛弃了之前的编译器，最终花了将进四年\n的时间，实现了现在的这套架构。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("字节码就是介于 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("AST")]),s._v(" 和机器码之间的一种代码。但是与特定类型的机器码无关，字节码需\n要通过解释器将其转换为机器码后才能执行。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("img",{attrs:{src:t(394),alt:"Algolia搜索"}})]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("从图中可以看出，机器码所占用的空间远远超过了字节码，所以使用字节码可以减少系统的\n内存使用。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"_2-3执行代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3执行代码"}},[s._v("#")]),s._v(" 2.3执行代码")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("生成字节码之后，接下来就要进入执行阶段了。\n通常，如果有一段第一次执行的字节码，解释器 Ignition 会逐条解释执行。在执行字节码\n的过程中，如果发现有热点代码（HotSpot），比如一段代码被重复执行多次，这种就称\n为热点代码，那么后台的编译器 TurboFan 就会把该段热点的字节码编译为高效的机器\n码，然后当再次执行这段被优化的代码时，只需要执行编译后的机器码就可以了，这样就大\n大提升了代码的执行效率。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[n("img",{attrs:{src:t(395),alt:"Algolia搜索"}})]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("Hot")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("热点代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h2",{attrs:{id:"_3-javascript性能优化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-javascript性能优化"}},[s._v("#")]),s._v(" 3.Javascript性能优化")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 提升单次脚本的执行速度，避免 JavaScript 的长任务霸占主线程，这样可以使得页面\n快速响应交互；\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 避免大的内联脚本，因为在解析 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTML")]),s._v(" 的过程中，解析和编译也会占用主线程；\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v(" 减少 JavaScript 文件的容量，因为更小的文件会提升下载速度，并且占用更低的内\n存。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h2",{attrs:{id:"_4-怎么理解-v8-执行时间越久-执行效率越高-这个性质的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-怎么理解-v8-执行时间越久-执行效率越高-这个性质的"}},[s._v("#")]),s._v(" 4.怎么理解“V8 执行时间越久，执行效率越高”这个性质的？")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("执行时间越长，执行效率越高。是因为更多的代码成为热点代码之后，转为了机器码来执\n行\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])])])}),[],!1,null,null,null);a.default=e.exports}}]);