(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{326:function(s,a,t){s.exports=t.p+"assets/img/image-20230707211005592.d7be0a05.png"},327:function(s,a,t){s.exports=t.p+"assets/img/image-20230707211137161.c6dceed3.png"},328:function(s,a,t){s.exports=t.p+"assets/img/image-20230707211150565.c08a55a5.png"},329:function(s,a,t){s.exports=t.p+"assets/img/image-20230707211210907.85732619.png"},464:function(s,a,t){"use strict";t.r(a);var e=t(4),r=Object(e.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"_1-变量提升"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-变量提升"}},[s._v("#")]),s._v(" 1.变量提升")]),s._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" myname "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'极客时间'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("这段代码可以看成是两段代码\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" myname "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 声明部分")]),s._v("\nmyname "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'极客时间'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 赋值部分")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[e("img",{attrs:{src:t(326),alt:"Algolia搜索"}})]),s._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[s._v("所谓的变量提升，是指在 JavaScript 代码执行过程中，JavaScript 引擎把变量的声明部分和函数的声明部分提升到代码开头的“行为”。变量被提升后，会给变量设置默认值，这个默认值就是我们熟悉的 "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),s._v("。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("img",{attrs:{src:t(327),alt:"Algolia搜索"}})]),s._v(" "),e("p",[e("strong",[s._v("JavaScript 代码的执行流程")])]),s._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[s._v("从概念的字面意义上来看，“变量提升”意味着变量和函数的声明会在物理层面移动到代码的最前面，正如我们所模拟的那样。但，这并不准确。实际上变量和函数声明在代码里的位置是不会改变的，而且是在编译阶段被 JavaScript 引擎放入内存中。对，你没听错，一段JavaScript 代码在执行之前需要被 JavaScript 引擎编译，编译完成之后，才会进入执行阶段。大致流程你可以参考下图：\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("img",{attrs:{src:t(328),alt:"Algolia搜索"}})]),s._v(" "),e("h2",{attrs:{id:"_2-编译阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-编译阶段"}},[s._v("#")]),s._v(" 2.编译阶段")]),s._v(" "),e("ol",[e("li",[e("strong",[s._v("第一部分：变量提升部分的代码。")])])]),s._v(" "),e("p",[e("img",{attrs:{src:t(329),alt:"Algolia搜索"}})]),s._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//从上图可以看出，输入一段代码，经过编译后，会生成两部分内容：执行上下文（Execution context）和可执行代码。执行上下文是 JavaScript 执行一段代码时的运行环境，比如调用一个函数，就会进入这个函数的执行上下文，确定该函数在执行期间用到的诸如 this、变量、对象以及函数等。 在执行上下文中存在一个变量环境的对象（Viriable Environment），该对象中保存了变量提升的内容，比如上面代码中的变量myname 和函数 showName，都保存在该对象中。")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ol",{attrs:{start:"2"}},[e("li",[e("strong",[s._v("第二部分：执行部分的代码。")])])]),s._v(" "),e("p",[s._v("```JavaScript 引擎开始执行“可执行代码”，按照顺序一行一行地执行。`")]),s._v(" "),e("h2",{attrs:{id:"_3-代码中出现相同的变量或者函数怎么办"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-代码中出现相同的变量或者函数怎么办"}},[s._v("#")]),s._v(" 3.代码中出现相同的变量或者函数怎么办？")]),s._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[s._v("在编译阶段其实我们声明的变量和函数都保存到了执行上下文的变量环境的对象里，说到对象，大家就了解了，当我们重复声明一个函数或变量，会替代变量环境对象里面的属性，所以会覆盖\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"_4-总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-总结"}},[s._v("#")]),s._v(" 4.总结")]),s._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[s._v(" JavaScript 的执行机制：先编译，再执行。\nJavaScript 代码执行过程中，需要先做变量提升，而之所以需要实现变量提升，是因为JavaScript 代码在执行之前需要先编译。在编译阶段，变量和函数会被存放到变量环境中，变量的默认值会被设置为"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),s._v("；在代码执行阶段，JavaScript 引擎会从变量环境中去查找自定义的变量和函数。如果在编译阶段，存在两个相同的函数，那么最终存放在变量环境中的是最后定义的那个，这是因为后定义的会覆盖掉之前定义的。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 当 JavaScript 执行全局代码的时候，会编译全局代码并创建全局执行上下文，而且在整个页面的生存周期内，全局执行上下文只有一份。\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 当调用一个函数的时候，函数体内的代码会被编译，并创建函数执行上下文，一般情况下，函数执行结束之后，创建的函数执行上下文会被销毁。\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v(" 当使用 eval 函数的时候，eval 的代码也会被编译，并创建执行上下文。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])])])}),[],!1,null,null,null);a.default=r.exports}}]);