(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{330:function(s,a,t){s.exports=t.p+"assets/img/image-20230707204819491.8ff95d5f.png"},331:function(s,a,t){s.exports=t.p+"assets/img/image-20230707204856124.36fc1ce1.png"},332:function(s,a,t){s.exports=t.p+"assets/img/image-20230707205004238.32855ff0.png"},333:function(s,a,t){s.exports=t.p+"assets/img/image-20230707205034845.9c1dd548.png"},334:function(s,a,t){s.exports=t.p+"assets/img/image-20230707205315534.20ec5564.png"},335:function(s,a,t){s.exports=t.p+"assets/img/image-20230707205526293.4bc95b6a.png"},336:function(s,a,t){s.exports=t.p+"assets/img/image-20230707205538739.cef7cc43.png"},337:function(s,a,t){s.exports=t.p+"assets/img/image-20230707205612422.2137c695.png"},338:function(s,a,t){s.exports=t.p+"assets/img/image-20230707205630898.de0aa6a2.png"},339:function(s,a,t){s.exports=t.p+"assets/img/image-20230707205648000.cdd9328d.png"},340:function(s,a,t){s.exports=t.p+"assets/img/image-20230707205703036.31031f50.png"},341:function(s,a,t){s.exports=t.p+"assets/img/image-20230707205735840.fb27fa27.png"},342:function(s,a,t){s.exports=t.p+"assets/img/image-20230707205754373.6e18adf4.png"},343:function(s,a,t){s.exports=t.p+"assets/img/image-20230707205806289.f5436a32.png"},344:function(s,a,t){s.exports=t.p+"assets/img/image-20230707205842256.3afcbe29.png"},345:function(s,a,t){s.exports=t.p+"assets/img/image-20230707205905045.9f5cd494.png"},346:function(s,a,t){s.exports=t.p+"assets/img/image-20230707205923850.9dcbcd1b.png"},347:function(s,a,t){s.exports=t.p+"assets/img/image-20230707205946171.e23435a8.png"},348:function(s,a,t){s.exports=t.p+"assets/img/image-20230707210006210.f38532d9.png"},349:function(s,a,t){s.exports=t.p+"assets/img/image-20230707210015472.aa49d532.png"},350:function(s,a,t){s.exports=t.p+"assets/img/image-20230707210034530.8d8aab10.png"},351:function(s,a,t){s.exports=t.p+"assets/img/image-20230707210112385.0d6ed648.png"},352:function(s,a,t){s.exports=t.p+"assets/img/image-20230707210153622.1cb756f0.png"},353:function(s,a,t){s.exports=t.p+"assets/img/image-20230707210219444.f5fe796c.png"},354:function(s,a,t){s.exports=t.p+"assets/img/image-20230707210229513.e360b80d.png"},355:function(s,a,t){s.exports=t.p+"assets/img/image-20230707210251623.8842fe8f.png"},356:function(s,a,t){s.exports=t.p+"assets/img/image-20230707210310745.9775eef0.png"},357:function(s,a,t){s.exports=t.p+"assets/img/image-20230707210426609.77f1dd1b.png"},358:function(s,a,t){s.exports=t.p+"assets/img/image-20230707210344232.306c89ad.png"},359:function(s,a,t){s.exports=t.p+"assets/img/image-20230707210507339.75265b35.png"},360:function(s,a,t){s.exports=t.p+"assets/img/image-20230707210605206.59b077ea.png"},361:function(s,a,t){s.exports=t.p+"assets/img/image-20230707210848550.04027185.png"},362:function(s,a,t){s.exports=t.p+"assets/img/image-20230707210912807.f6cebe5e.png"},465:function(s,a,t){"use strict";t.r(a);var n=t(4),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"_1-为什么要学习浏览器的工作原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-为什么要学习浏览器的工作原理"}},[s._v("#")]),s._v(" 1.为什么要学习浏览器的工作原理")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 准确评估 Web 开发项目的可行性\n随着 Web 特性的极大丰富和浏览器性能的提升，越来越多的项目可以用 Web 来开发。所\n以，了解浏览器是如何工作的，能够让你更加准确地决策是否可以采用 Web 来开发项目。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 从更高维度审视页面\n作为一名合格的开发者，你还要具备一项重要的技能，那就是：要能站在用户体验角度来考\n虑页面性能。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v(" 在快节奏的技术迭代中把握本质\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h2",{attrs:{id:"_2-chrome架构-仅仅打开了1个页面-为什么有4个进程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-chrome架构-仅仅打开了1个页面-为什么有4个进程"}},[s._v("#")]),s._v(" 2.Chrome架构：仅仅打开了1个页面，为什么有4个进程？")]),s._v(" "),n("h3",{attrs:{id:"_2-1-什么是并行处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-什么是并行处理"}},[s._v("#")]),s._v(" 2.1 什么是并行处理")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("计算机中的并行处理就是同一时刻处理多个任务 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("使用并行处理能大大提升性能。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[n("strong",[s._v("示例")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("B")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("C")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("在编写代码的时候，我们可以把这个过程拆分为四个任务：\n正常情况下程序可以使用单线程来处理，也就是分四步按照顺序分别执行这四个任务。\n如果采用多线程，会怎么样呢？我们只需分“两步走”：第一步，使用三个线程同时执行前\n三个任务；第二步，再执行第四个显示任务。\n通过对比分析，你会发现用单线程执行需要四步，而使用多线程只需要两步。因此，使用并\n行处理能大大提升性能。\n任务 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" 是计算 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("；\n任务 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" 是计算 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("B")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("；\n任务 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" 是计算 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("C")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("；\n任务 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" 是显示最后计算的结果。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h3",{attrs:{id:"_2-2-线程-vs-进程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-线程-vs-进程"}},[s._v("#")]),s._v(" 2.2 线程 VS 进程")]),s._v(" "),n("p",[n("strong",[s._v("线程")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("多线程可以并行处理任务，但是线程是不能单独存在的，它是由进程来启动和管理\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[n("strong",[s._v("进程")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("一个进程就是一个程序的运行实例。详细解释就是，启动一个程序的时候，操作系统会为该\n程序创建一块内存，用来存放代码、运行中的数据和一个执行任务的主线程，我们把这样的\n一个运行环境叫进程。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("img",{attrs:{src:t(330),alt:"Algolia搜索"}})]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("图中可以看到，线程是依附于进程的，而进程中使用多线程并行处理能提升运算效率。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[n("strong",[s._v("进程与线程之间的关系")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 进程中的任意一线程执行出错，都会导致整个进程的崩溃\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 线程之间共享进程中的数据。 线程之间可以对进程的公共数据进行读写操作。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v(" 当一个进程关闭之后，操作系统会回收进程所占用的内存。\n    当一个进程退出时，操作系统会回收该进程所申请的所有资源；即使其中任意线程因为操作\n    不当导致内存泄漏，当进程退出时，这些内存也会被正确回收。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.")]),s._v(" 进程之间的内容相互隔离。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[n("strong",[s._v("4.描述")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("进程隔离是为保护操作系统中进程互不干扰的技术，每一个进程只能访问自己占有的数据，\n也就避免出现进程 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v(" 写入数据到进程 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("B")]),s._v(" 的情况。正是因为进程之间的数据是严格隔离的，\n所以一个进程如果崩溃了，或者挂起了，是不会影响到其他进程的。如果进程之间需要进行\n数据的通信，这时候，就需要使用用于进程间通信（"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IPC")]),s._v("）的机制了\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[n("img",{attrs:{src:t(331),alt:"Algolia搜索"}})]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("从上图可以看出，线程 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("、线程 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("、线程 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" 分别把执行的结果写入 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v("、"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("B")]),s._v("、"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("C")]),s._v(" 中，然后线程\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" 继续从 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v("、"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("B")]),s._v("、"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("C")]),s._v(" 中读取数据，用来显示执行结果。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"_2-3-单进程浏览器时代"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-单进程浏览器时代"}},[s._v("#")]),s._v(" 2.3 单进程浏览器时代")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("单进程浏览器\n是指浏览器的所有功能模块都是运行在同一个进程里，这些模块包含了网络、插件、\nJavaScript 运行环境、渲染引擎和页面等。\n缺点： "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("不稳定  线程中任何一个地方出现问题 就会导致整个进程崩溃\n       "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 不流畅  单线程 一次只能执行一个事件\n       "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v("不安全， 打开多个页面 ，一个页面崩溃，失去响应，整个浏览器就会崩溃，会导致丢失未保存的数据\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h3",{attrs:{id:"_2-4-多进程浏览器时代"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-多进程浏览器时代"}},[s._v("#")]),s._v(" 2.4 多进程浏览器时代")]),s._v(" "),n("p",[n("img",{attrs:{src:t(332),alt:"Algolia搜索"}})]),s._v(" "),n("ol",[n("li",[n("strong",[s._v("如何解决不稳定的问题")])])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("由于进程是相互隔离的，所以当一个页面或者插件崩溃\n时，影响到的仅仅是当前的页面进程或者插件进程，并不会影响到浏览器和其他页面，这就\n完美地解决了页面或者插件的崩溃会导致整个浏览器崩溃，也就是不稳定的问题\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("ol",{attrs:{start:"2"}},[n("li",[n("strong",[s._v("如何解决不流畅的问题")])])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("javaScript 也是运行在渲染进程中\n的，所以即使 JavaScript 阻塞了渲染进程，影响到的也只是当前的渲染页面，而并不会影\n响浏览器和其他页面，因为其他页面的脚本是运行在它们自己的渲染进程中的。所以当我们\n再在 Chrome 中运行上面那个死循环的脚本时，没有响应的仅仅是当前的页面。对于内存泄漏的解决方法那就更简单了，因为当关闭一个页面时，整个渲染进程也会被关闭，之后该进程所占用的内存都会被系统回收，这样就轻松解决了浏览器页面的内存泄漏问题。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("ol",{attrs:{start:"3"}},[n("li",[s._v("如何解决安全问题")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("采用多进程架构的额外好处是可以使\n用安全沙箱，你可以把沙箱看成是操作系统给进程上了一把锁，沙箱里面的程序可以运行，\n但是不能在你的硬盘上写入任何数据，也不能在敏感位置读取任何数据，例如你的文档和桌\n面。Chrome 把插件进程和渲染进程锁在沙箱里面，这样即使在渲染进程或者插件进程里\n面执行了恶意程序，恶意程序也无法突破沙箱去获取系统权限。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[n("strong",[s._v("最新的Chrome进程架构")])]),s._v(" "),n("p",[n("img",{attrs:{src:t(333),alt:"Algolia搜索"}})]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("浏览器进程。主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("渲染进程。核心任务是将 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTML")]),s._v("、"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CSS")]),s._v(" 和 JavaScript 转换为用户可以与之交互的网页，\n排版引擎 Blink 和 JavaScript 引擎 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("V8")]),s._v(" 都是运行在该进程中，默认情况下，Chrome 会\n为每个 Tab 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("GPU")]),s._v(" 进程。其实，Chrome 刚开始发布的时候是没有 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("GPU")]),s._v(" 进程的。而 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("GPU")]),s._v(" 的使用初衷\n是为了实现 3D "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CSS")]),s._v(" 的效果，只是随后网页、Chrome 的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UI")]),s._v(" 界面都选择采用 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("GPU")]),s._v(" 来绘\n制，这使得 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("GPU")]),s._v(" 成为浏览器普遍的需求。最后，Chrome 在其多进程架构上也引入了\n"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("GPU")]),s._v(" 进程。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.")]),s._v("网络进程。主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面\n的，直至最近才独立出来，成为一个单独的进程。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5.")]),s._v("插件进程。主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保\n证插件进程崩溃不会对浏览器和页面造成影响。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("h2",{attrs:{id:"_3-tcp协议-如何保证页面文件能被完整送达浏览器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-tcp协议-如何保证页面文件能被完整送达浏览器"}},[s._v("#")]),s._v(" 3. TCP协议：如何保证页面文件能被完整送达浏览器？")]),s._v(" "),n("h3",{attrs:{id:"_3-1-什么是ip"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-什么是ip"}},[s._v("#")]),s._v(" "),n("strong",[s._v("3.1 什么是IP")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("计算机的地址就称为 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v(" 地址，访问任何网站实际上只是你的计算机向另外一台计算机请求信息。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[n("strong",[s._v("UDP：把数据包送达应用程序")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v(" 是非常底层的协议，只负责把数据包传送到对方电脑，但是对方电脑并不知道把数据包交给哪个程序，是交给浏览器还是交给王者荣耀？因此，需要基于 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v(" 之上开发能和应用打交道的协议，最常见的是“用户数据包协议（User Datagram Protocol）”，简称 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v("。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" 中一个最重要的信息是端口号，端口号其实就是一个数字，每个想访问网络的程序都需要绑定一个端口号。通过端口号 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" 就能把指定的数据包发送给指定的程序了，所以 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v(" 通过 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v(" 地址信息把数据包发送给指定的电脑，而 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" 通过端口号把数据包分发给正确的程序。和 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v(" 头一样，端口号会被装进 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" 头里面，"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" 头再和原始数据包合并组成新的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" 数据包。"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" 头中除了目的端口，还有源端口号等信息。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[n("img",{attrs:{src:t(334),alt:"Algolia搜索"}})]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("下面我们一起来看下一个数据包从主机 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v(" 旅行到主机 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("B")]),s._v(" 的路线：\n上层将含有“极客时间”的数据包交给传输层；传输层会在数据包前面附加上 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" 头，组成新的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" 数据包，再将新的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" 数据包交给网络层；\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("网络层再将 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v(" 头附加到数据包上，组成新的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v(" 数据包，并交给底层；\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("数据包被传输到主机 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("B")]),s._v(" 的网络层，在这里主机 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("B")]),s._v(" 拆开 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v(" 头信息，并将拆开来的数据部分交给传输层；\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v("在传输层，数据包中的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" 头会被拆开，并根据 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" 中所提供的端口号，把数据部分交给上层的应用程序；\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.")]),s._v("最终，含有“极客时间”信息的数据包就旅行到了主机 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("B")]),s._v(" 上层应用程序这里。\n\n在使用 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" 发送数据时，有各种因素会导致数据包出错，虽然 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" 可以校验数据是否正确，但是对于错误的数据包，"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" 并不提供重发机制，只是丢弃当前的包，而且 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" 在发送之后也无法知道是否能达到目的地。虽说 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" 不能保证数据可靠性，但是传输速度却非常快，所以 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" 会应用在一些关注速度、但不那么严格要求数据完整性的领域，如在线视频、互动游戏等。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h3",{attrs:{id:"_3-2-udp的问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-udp的问题"}},[s._v("#")]),s._v(" 3.2 UDP的问题")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" 来传输会存在两个问题：\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("数据包在传输过程中容易丢失；\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("大文件会被拆分成很多小的数据包来传输，这些小的数据包会经过不同的路由，并在不同的时间到达接收端，而 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" 协议并不知道如何组装这些数据包，从而把这些数据包不能还原成完整的文件。\n如何解决：引入了"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h3",{attrs:{id:"_3-3什么是tcp"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-3什么是tcp"}},[s._v("#")]),s._v(" 3.3什么是TCP")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v("（Transmission Control Protocol，传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议。\n相对于 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v("，"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("有下面两个特点")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("对于数据包丢失的情况，"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 提供重传机制；\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 引入了数据包排序机制，用来保证把乱序的数据包组合成一个完整的文件。\n"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v("和"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v("是差不多的，但是"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v("数据在传输过程中容易丢失数据  ，"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 头的信息保证了一块大的数据传输的完整性。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[n("img",{attrs:{src:t(335),alt:"Algolia搜索"}})]),s._v(" "),n("p",[s._v("``一个完整的 TCP 连接的生命周期包括了“建立连接”“传输数据”和“断开连接”三个阶段`\n"),n("img",{attrs:{src:t(336),alt:"Algolia搜索"}})]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("首先，建立连接阶段。这个阶段是通过“三次握手”来建立客户端和服务器之间的连接。"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 提供面向连接的通信传输。面向连接是指在数据通信开始之前先做好两端之间的准备工作。所谓三次握手，是指在建立一个 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 连接时，客户端和服务器总共要发送三个数据包以确认连接的建立。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("其次，传输数据阶段。在该阶段，接收端需要对每个数据包进行确认操作，也就是接收端在接收到数据包之后，需要发送确认数据包给发送端。所以当发送端发送了一个数据包之后，在规定时间内没有接收到接收端反馈的确认消息，则判断为数据包丢失，并触发发送端的重发机制。同样，一个大的文件在传输过程中会被拆分成很多小的数据包，这些数据包到达接收端后，接收端会按照 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 头中的序号为其排序，从而保证组成完整的数据。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v("最后，断开连接阶段。数据传输完毕之后，就要终止连接了，涉及到最后一个阶段“四次挥手”来保证双方都能断开连接。\n        到这里你应该就明白了，"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 为了保证数据传输的可靠性，牺牲了数据包的传输速度，因为“三次握手”和“数据包校验机制”等把传输过程中的数据包的数量提高了一倍\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[n("strong",[s._v("总结")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("互联网中的数据是通过数据包来传输的，数据包在传输过程中容易丢失或出错。\n"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v(" 负责把数据包送达目的主机。\n"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" 负责把数据包送达具体应用。 只不过udp有可能会丢包，而tcp采用了很多复杂的机制，保证了数据的完整性\n而 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 保证了数据完整地传输，它的连接可分为三个阶段：建立连接、传输数据和断开连接。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h3",{attrs:{id:"_3-4-tcp和http的关系"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-tcp和http的关系"}},[s._v("#")]),s._v(" 3.4 TCP和http的关系")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("理解 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Tcp是个梯子，http就是利用梯子来搬运货物 \n理解 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v("理解为一个传送带，而"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v("是一种具体类型的货物，"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v("负责运送这种货物并且保证不会弄丢\n先通过三次握手建立tcp链接，链接建立好之后，发送http请求行和http请求头给服务器，然后服务器返回响应行，响应头和响应体，最终完成后通过四次挥手断开tcp链接！\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ip协议保证了数据包传送到指定的目的主机\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("udp协议保证了数据包能传送到目的主机上的目标应用程序，速度快，但缺乏可靠性\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("tcp协议牺牲了速度来弥补了upd协议的不足，tcp具有回传机制保证数据传送的可靠性\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.")]),s._v("这几种协议中都有一个概念“地址”，ip地址，端口号\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h2",{attrs:{id:"_4-http请求流程-为什么很多站点第二次打开速度会很快"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-http请求流程-为什么很多站点第二次打开速度会很快"}},[s._v("#")]),s._v(" 4.HTTP请求流程：为什么很多站点第二次打开速度会很快？")]),s._v(" "),n("p",[n("strong",[s._v("什么是http")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 协议，正是建立在 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 连接基础之上的。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 是一种允许浏览器向服务器获取资源的协议，是 Web 的基础，通常由浏览器发起请求，用来获取不同类型的文件，例如 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTML")]),s._v(" 文件、"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CSS")]),s._v(" 文件、JavaScript 文件、图片、视频等。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v("此外，"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 也是浏览器使用最广的协议\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h3",{attrs:{id:"_4-1-浏览器端发起-http-请求流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-浏览器端发起-http-请求流程"}},[s._v("#")]),s._v(" 4.1 浏览器端发起 HTTP 请求流程")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("如果你在浏览器地址栏里键入极客时间网站的地址：\n"),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("http")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("geekbang"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("org"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("index"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("html， 那么接下来，浏览器会完成哪些动作呢？下面我们就一步一步详细“追踪”下。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("1.构建请求")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("首先，浏览器构建请求行信息（如下所示），构建好后，浏览器准备发起网络请求。\n"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("GET")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("index"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("html "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP1")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("2.查找缓存")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("在真正发起网络请求之前，浏览器会先在浏览器缓存中查询是否有要请求的文件。\n其中，浏览器缓存是一种在本地保存资源副本，以供下次请求时直接使用的技术。\n当浏览器发现请求的资源已经在浏览器缓存中存有副本，它会拦截请求，返回该资源的副本，并直接结束请求，而不会再去源服务器重新下载。这样做的\n好处有：\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("缓解服务器端压力，提升性能（获取资源的耗时更短了）；\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("对于网站来说，缓存是实现快速资源加载的重要组成部分。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v("当然，如果缓存查找失败，就会进入网络请求过程了。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[n("strong",[s._v("3.准备IP地址和端口")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("不过，先不急，在了解网络请求之前，我们需要先看看 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 和 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 的关系。因为浏览器使用 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 协议作为应用层协议，用来封装请求的文本信息；并使用 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v(" 作传输层协议将它发到网络上，所以在 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 工作开始之前，浏览器需要通过 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 与服务器建立连接。也就是说 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 的内容是通过 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 的传输数据阶段来实现的，你可以结合下图更好地理解这二者的关系\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[n("img",{attrs:{src:t(337),alt:"Algolia搜索"}})]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("我们讲到建立 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 连接的第一步就是需要准备 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v(" 地址和端口号。那怎么获取 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v(" 地址和端口号呢？这得看看我们现在有什么，我们有一个 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("URL")]),s._v(" 地址，那么是否可以利用 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("URL")]),s._v(" 地址来获取 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v(" 和端口信息呢？\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[n("strong",[s._v("域名系统")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("由于 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v(" 地址是数字标识，比如极客时间网站的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v(" 是 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("39.106")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v(".233")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v(".176")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 难以记忆，但使用极客时间的域名（time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("geekbang"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("org）就好记多了，所以基于这个需求又出现了一个服务，负责把域名和 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v(" 地址做一一映射关系。这套域名映射为 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v(" 的系统就叫做“域名系统”，简称 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DNS")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("这样一路推导下来，你会发现在第一步浏览器会请求 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DNS")]),s._v(" 返回域名对应的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v("。当然浏览器还提供了 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DNS")]),s._v(" 数据缓存服务，如果某个域名已经解析过了，那么浏览器会缓存解析的结果，以供下次查询时直接使用，这样也会减少一次网络请求。\n拿到 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v(" 之后，接下来就需要获取端口号了。通常情况下，如果 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("URL")]),s._v(" 没有特别指明端口号，那么 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 协议默认是 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" 端口。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("4.等待 TCP 队列")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("现在已经把端口和 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v(" 地址都准备好了，那么下一步是不是可以建立 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 连接了呢？\n答案依然是“不行”。Chrome 有个机制，同一个域名同时最多只能建立 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" 个 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 连接，如果在同一个域名下同时有 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" 个请求发生，那么其中 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" 个请求会进入排队等待状态，直至进行中的请求完成。\n当然，如果当前请求数量少于 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("，会直接进入下一步，建立 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 连接。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("strong",[s._v("5.建立TCP连接")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("排队等待结束之后，终于可以快乐地和服务器握手了，在 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 工作开始之前，浏览器通过 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 与服务器建立连接。而 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 的工作方式，我在上一篇文章中已经做过详细介绍了，如果有必要，你可以自行回顾下，这里我就不再重复讲述了。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[n("strong",[s._v("6.发送HTTP请求")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("一旦建立了 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 连接，浏览器就可以和服务器进行通信了。而 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 中的数据正是在这个通信过程中传输的。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[n("img",{attrs:{src:t(338),alt:"Algolia搜索"}})]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("首先浏览器会向服务器发送请求行，它包括了请求方法、请求 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("URI")]),s._v("（Uniform Resource Identifier）和 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 版本协议。发送请求行，就是告诉服务器浏览器需要什么资源，最常用的请求方法是 Get。比如，直接在浏览器地址栏键入极客时间的域名（time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("geekbang"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("org），这就是告诉服务器要 Get 它的首页资源\n在浏览器发送请求行命令之后，还要以请求头形式发送其他一些信息，把浏览器的一些基础信息告诉服务器。比如包含了浏览器所使用的操作系统、浏览器内核等信息，以及当前请求的域名信息、浏览器端的 Cookie 信息，等等。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"_4-2-服务器端处理-http-请求流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-服务器端处理-http-请求流程"}},[s._v("#")]),s._v(" 4.2 服务器端处理 HTTP 请求流程")]),s._v(" "),n("p",[n("strong",[s._v("1. 返回请求")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("一旦服务器处理结束，便可以返回数据给浏览器了。你可以通过工具软件 curl 来查看返回请求数据，具体使用方法是在命令行中输入以下命令：\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("curl "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("i  https"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token regex"}},[n("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("time.geekbang.org")]),n("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("注意这里加上了"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("i是为了返回响应行、响应头和响应体的数据，返回的结果如下图所示，你可以结合这些数据来理解服务器是如何响应浏览器的。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[n("img",{attrs:{src:t(339),alt:"Algolia搜索"}})]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 首先服务器会返回响应行，包括协议版本和状态码。但并不是所有的请求都可以被服务器处理的，那么一些无法处理或者处理出错的信息，怎么办呢？服务器会通过请求行的状态码来告诉浏览器它的处理结果，比如：最常用的状态码是 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v("，表示处理成功；如果没有找到页面，则会返回 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("404")]),s._v("。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 随后，正如浏览器会随同请求发送请求头一样，服务器也会随同响应向浏览器发送响应头。响应头包含了服务器自身的一些信息，比如服务器生成返回数据的时间、返回的数据类型（"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("JSON")]),s._v("、"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTML")]),s._v("、流媒体等类型），以及服务器要在客户端保存的 Cookie 等信息。发送完响应头后，服务器就可以继续发送响应体的数据，通常，响应体就包含了 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTML")]),s._v(" 的实际内容。以上这些就是服务器响应浏览器的具体过程。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[n("strong",[s._v("2.断开连接")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("通常情况下，一旦服务器向客户端返回了请求数据，它就要关闭 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 连接。不过如果浏览器或者服务器在其头信息中加入了：\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Connection:Keep-Alive ")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("那么 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 连接在发送后将仍然保持打开状态，这样浏览器就可以继续通过同一个 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 连接发送请求。保持 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 连接可以省去下次请求时需要建立连接的时间，提升资源加载速度。比如，一个 Web 页面中内嵌的图片就都来自同一个 Web 站点，如果初始化了一个持久连接，你就可以复用该连接，以请求其他资源，而不需要重新再建立新的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 连接。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[n("strong",[s._v("3. 重定向")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("到这里似乎请求流程快结束了，不过还有一种情况你需要了解下，比如当你在浏览器中打开 geekbang"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("org 后，你会发现最终打开的页面地址是 https"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("www"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("geekbang"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("org。这两个 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("URL")]),s._v(" 之所以不一样，是因为涉及到了一个重定向操作。跟前面一样，你依然可以使用 curl 来查看下请求 geekbang"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("org 会返回什么内容？\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[n("code",[s._v("在控制台输入如下命令：")])]),s._v(" "),n("div",{staticClass:"language-cmd line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("curl -I geekbang.org\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("注意这里输入的参数是"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("I")]),s._v("，和"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("i不一样，"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("I")]),s._v("表示只需要获取响应头和响应行数据，而不需要获取响应体的数据，最终返回的数据如下图所示\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[n("img",{attrs:{src:t(340),alt:"Algolia搜索"}})]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("从图中你可以看到，响应行返回的状态码是 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("301")]),s._v("，状态 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("301")]),s._v(" 就是告诉浏览器，我需要重定向到另外一个网址，而需要重定向的网址正是包含在响应头的 Location 字段中，接下来，浏览器获取 Location 字段中的地址，并使用该地址重新导航，这就是一个完整重定向的执行流程。这也就解释了为什么输入的是 geekbang"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("org，最终打开的却是 https"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("www"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("geekbang"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("org 了。\n不过也不要认为这种跳转是必然的。如果你打开 https"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("12306")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("cn，你会发现这个站点是打不开的。这是因为 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("12306")]),s._v(" 的服务器并没有处理跳转，所以必须要手动输入完整的 https"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("www"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("12306")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("cn 才能打开页面。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"_4-3为什么很多站点第二次打开速度会快很多"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-3为什么很多站点第二次打开速度会快很多"}},[s._v("#")]),s._v(" 4.3为什么很多站点第二次打开速度会快很多")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("如果第二次页面打开很快，主要原因是第一次加载页面过程中，缓存了一些耗时的数据\n哪些数据会被缓存"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DNS")]),s._v(" 缓存\n    "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("页面资源缓存\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("​ "),n("img",{attrs:{src:t(341),alt:"Algolia搜索"}}),s._v(" "),n("code",[s._v("缓存查找流程示意图")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("当服务器返回 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 响应头给浏览器时，浏览器是通过响应头中的 Cache"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Control 字段来设置是否缓存该资源。通常，我们还需要为这个资源设置一个缓存过期时长，而这个时长是通过 Cache"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Control 中的 Max"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("age 参数来设置的，比如上图设置的缓存过期时间是 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2000")]),s._v(" 秒。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("Cache"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Control"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("Max"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("age"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2000")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("这也就意味着，在该缓存资源还未过期的情况下"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 如果再次请求该资源，会直接返回缓存中的资源给浏览器。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[n("code",[s._v("但如果缓存过期了，浏览器则会继续发起网络请求，并且在 HTTP 请求头中带上")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("If"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("None"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Match"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"4f80f-13c-3a1xb12a"')]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("服务器收到请求头后，会根据 If"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("None"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Match 的值来判断请求的资源是否有更新。如果没有更新，就返回 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("304")]),s._v(" 状态码，相当于服务器告诉浏览器：“这个缓存可以继续使用，这次就不重复发送数据给你了。”\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("如果资源有更新，服务器就直接返回最新资源给浏览器。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"_4-4登录状态是如何保持的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-4登录状态是如何保持的"}},[s._v("#")]),s._v(" 4.4登录状态是如何保持的")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("用户打开登录页面，在登录框里填入用户名和密码，点击确定按钮。点击按钮会触发页面脚本生成用户登录信息，然后调用 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("POST")]),s._v(" 方法提交用户登录信息给服务器。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("服务器接收到浏览器提交的信息之后，查询后台，验证用户登录信息是否正确，如果正确的话，会生成一段表示用户身份的字符串，并把该字符串写到响应头的 Set"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Cookie 字段里，如下所示，然后把响应头发送给浏览器。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("Set"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Cookie"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UID")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("3431uad"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("浏览器在接收到服务器的响应头后，开始解析响应头，如果遇到响应头里含有 Set"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Cookie 字段的情况，浏览器就会把这个字段信息保存到本地。比如把"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UID")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("3431uad保持到本地。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("当用户再次访问时，浏览器会发起 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 请求，但在发起请求之前，浏览器会读取之前保存的 Cookie 数据，并把数据写进请求头里的 Cookie 字段里（如下所示），然后浏览器再将请求头发送给服务器。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("Cookie")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UID")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("3431uad"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("服务器在收到 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 请求头数据之后，就会查找请求头里面的“Cookie”字段信息，当查找到包含"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UID")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("3431uad的信息时，服务器查询后台，并判断该用户是已登录状态，然后生成含有该用户信息的页面数据，并把生成的数据发送给浏览器。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("浏览器在接收到该含有当前用户的页面数据后，就可以正确展示用户登录的状态信息了。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("``好了，通过这个流程你可以知道浏览器页面状态是通过使用 Cookie 来实现的。Cookie 流程可以参考下图：")])]),s._v(" "),n("p",[s._v("​ "),n("img",{attrs:{src:t(342),alt:"Algolia搜索"}})]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("简单地说，如果服务器端发送的响应头内有 Set"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Cookie 的字段，那么浏览器就会将该字段的内容保持到本地。当下次客户端再往该服务器发送请求时，客户端会自动在请求头中加入 Cookie 值后再发送出去。服务器端发现客户端发送过来的 Cookie 后，会去检查究竟是从哪一个客户端发来的连接请求，然后对比服务器上的记录，最后得到该用户的状态信息。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[n("strong",[s._v("总结")]),s._v("\n​ "),n("img",{attrs:{src:t(343),alt:"Algolia搜索"}})]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("从图中可以看到，浏览器中的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 请求从发起到结束一共经历了如下八个阶段：构建请求、查找缓存、准备 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v(" 和端口、等待 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 队列、建立 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 连接、发起 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 请求、服务器处理请求、服务器返回请求和断开连接。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("然后我还通过 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 请求路径解答了两个经常会碰到的问题，一个涉及到了 Cache 流程，另外一个涉及到如何使用 Cookie 来进行状态管理。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"_4-5-如果一个页面的网络加载时间过久-你是如何分析卡在哪个阶段的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-如果一个页面的网络加载时间过久-你是如何分析卡在哪个阶段的"}},[s._v("#")]),s._v(" 4.5 如果一个页面的网络加载时间过久，你是如何分析卡在哪个阶段的？")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("js性能太差，阻塞页面因为浏览器解析过程中，遇到某个请求慢阻塞页面的加载\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("网络传输丢包比较严重，需要不断重传。然后通过ping curl看看对应的时延高不高。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v(" 然后通过wireshake看看具体哪里出了问题。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.")]),s._v("假如别人访问很快，自己电脑很慢，就要看看自己客户端是否有问题了。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h2",{attrs:{id:"_5-导航流程-从输入url到页面展示-这中间发生了什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-导航流程-从输入url到页面展示-这中间发生了什么"}},[s._v("#")]),s._v(" 5.导航流程：从输入URL到页面展示，这中间发生了什么？")]),s._v(" "),n("p",[s._v("​ "),n("img",{attrs:{src:t(344),alt:"Algolia搜索"}})]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("浏览器进程主要负责用户交互、子进程管理和文件储存等功能。\n网络进程是面向渲染进程和浏览器进程等提供网络下载功能。\n渲染进程的主要职责是把从网络下载的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTML")]),s._v("、JavaScript、"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CSS")]),s._v("、图片等资源解析为可以显示和交互的页面。因为渲染进程所有的内容都是通过网络获取的，会存在一些恶意代码利用浏览器漏洞对系统进行攻击，所以运行在渲染进程里面的代码是不被信任的。这也是为什么 Chrome 会让渲染进程运行在安全沙箱里，就是为了保证系统的安全。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("strong",[s._v("上图的大概过程")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("首先，浏览器进程接收到用户输入的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("URL")]),s._v(" 请求，浏览器进程便将该 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("URL")]),s._v(" 转发给网络进程。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("然后，在网络进程中发起真正的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("URL")]),s._v(" 请求。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v("接着网络进程接收到了响应头数据，便解析响应头数据，并将数据转发给浏览器进程。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("浏览器进程接收到网络进程的响应头数据之后，发送“提交导航")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("CommitNavigation"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("”消息到渲染进程；\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5.")]),s._v("渲染进程接收到“提交导航”的消息之后，便开始准备接收 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTML")]),s._v(" 数据，接收数据的方式是直接和网络进程建立数据管道；\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6.")]),s._v("最后渲染进程会向浏览器进程“确认提交”，这是告诉浏览器进程：“已经准备好接受和解析页面数据了”。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.")]),s._v("浏览器进程接收到渲染进程“提交文档”的消息之后，便开始移除之前旧的文档，然后更新浏览器进程中的页面状态。\n这其中，用户发出 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("URL")]),s._v(" 请求到页面开始解析的这个过程，就叫做导航。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h3",{attrs:{id:"_5-1从输入url到页面展示"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-1从输入url到页面展示"}},[s._v("#")]),s._v(" 5.1"),n("strong",[s._v("从输入URL到页面展示")])]),s._v(" "),n("p",[n("strong",[s._v("1.用户输入")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("当用户在地址栏中输入一个查询关键字时，地址栏会判断输入的关键字是搜索内容，还是请求的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("URL")]),s._v("。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("如果是搜索内容，地址栏会使用浏览器默认的搜索引擎，来合成新的带搜索关键字的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("URL")]),s._v("。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("如果判断输入内容符合 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("URL")]),s._v(" 规则，比如输入的是 time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("geekbang"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("org，那么地址栏会根据规则，把这段内容加上协议，合成为完整的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("URL")]),s._v("，如 https"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("geekbang"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("org。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("当用户输入关键字并键入回车之后，这意味着当前页面即将要被替换成新的页面，不过在这个流程继续之前，浏览器还给了当前页面一次执行 beforeunload 事件的机会，beforeunload 事件允许页面在退出之前执行一些数据清理操作，还可以询问用户是否要离开当前页面，比如当前页面可能有未提交完成的表单等情况，因此用户可以通过 beforeunload 事件来取消导航，让浏览器不再执行任何后续工作。\n\n当前页面没有监听 beforeunload 事件或者同意了继续后续流程，那么浏览器便进入下图的状态：\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("​ "),n("img",{attrs:{src:t(345),alt:"Algolia搜索"}})]),s._v(" "),n("div",{staticClass:"language-tex line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-tex"}},[n("code",[s._v("从图中可以看出，当浏览器刚开始加载一个地址之后，标签页上的图标便进入了加载状态。但此时图中页面显示的依然是之前打开的页面内容，并没立即替换为极客时间的页面。因为需要等待提交文档阶段，页面内容才会被替换。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[n("strong",[s._v("2. URL请求过程")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("接下来，便进入了页面资源请求过程。这时，浏览器进程会通过进程间通信（"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IPC")]),s._v("）把 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("URL")]),s._v(" 请求发送至网络进程，网络进程接收到 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("URL")]),s._v(" 请求后，会在这里发起真正的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("URL")]),s._v(" 请求流程。那具体流程是怎样的呢？\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("首先，网络进程会查找本地缓存是否缓存了该资源。如果有缓存资源，那么直接返回资源给浏览器进程；如果在缓存中没有查找到资源，那么直接进入网络请求流程。这请求前的第一步是要进行 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DNS")]),s._v(" 解析，以获取请求域名的服务器 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v(" 地址。如果请求协议是 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTPS")]),s._v("，那么还需要建立 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TLS")]),s._v(" 连接。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("接下来就是利用 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v(" 地址和服务器建立 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 连接。连接建立之后，浏览器端会构建请求行、请求头等信息，并把和该域名相关的 Cookie 等数据附加到请求头中，然后向服务器发送构建的请求信息。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("服务器接收到请求信息后，会根据请求信息生成响应数据（包括响应行、响应头和响应体等信息），并发给网络进程。等网络进程接收了响应行和响应头之后，就开始解析响应头的内容了。（为了方便讲述，下面我将服务器返回的响应头和响应行统称为响应头。）\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("strong",[s._v("2.1重定向")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("在接收到服务器返回的响应头后，网络进程开始解析响应头，如果发现返回的状态码是 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("301")]),s._v(" 或者 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("302")]),s._v("，那么说明服务器需要浏览器重定向到其他 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("URL")]),s._v("。这时网络进程会从响应头的 Location 字段里面读取重定向的地址，然后再发起新的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 或者 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTPS")]),s._v(" 请求，一切又重头开始了。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("``比如，我们在终端里输入以下命令：`")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("curl "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("I")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("http")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token regex"}},[n("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("time.geekbang.org")]),n("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),s._v("\ncurl "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("I")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("URL")]),s._v("的命令是接收服务器返回的响应头的信息。执行命令后，我们看到服务器返回的响应头信息如下：\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("​ "),n("img",{attrs:{src:t(346),alt:"Algolia搜索"}})]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("从图中可以看出，极客时间服务器会通过重定向的方式把所有 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 请求转换为 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTPS")]),s._v(" 请求。也就是说你使用 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 向极客时间服务器请求时，服务器会返回一个包含有 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("301")]),s._v(" 或者 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("302")]),s._v(" 状态码响应头，并把响应头的 Location 字段中填上 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTPS")]),s._v(" 的地址，这就是告诉了浏览器要重新导航到新的地址上。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("``下面我们再使用 HTTPS 协议对极客时间发起请求，看看服务器的响应头信息是什么样子的。`")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("\tcurl "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("I")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("https")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token regex"}},[n("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("time.geekbang.org")]),n("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("​ "),n("img",{attrs:{src:t(347),alt:"Algolia搜索"}})]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("从图中可以看出，服务器返回的响应头的状态码是 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v("，这是告诉浏览器一切正常，可以继续往下处理该请求了。\n好了，以上是重定向内容的介绍。现在你应该理解了，在导航过程中，如果服务器响应行的状态码包含了 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("301")]),s._v("、"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("302")]),s._v(" 一类的跳转信息，浏览器会跳转到新的地址继续导航；如果响应行是 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v("，那么表示浏览器可以继续处理该请求。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("2.2 响应数据类型处理")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("在处理了跳转信息之后，我们继续导航流程的分析。"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("URL")]),s._v(" 请求的数据类型，有时候是一个下载类型，有时候是正常的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTML")]),s._v(' 页面，那么浏览器是如何区分它们呢？\n\n答案是 "Content'),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Type。Content"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Type 是 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 头中一个非常重要的字段， 它告诉浏览器服务器返回的响应体数据是什么类型，然后浏览器会根据 Content"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Type 的值来决定如何显示响应体的内容。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("```这里我们还是以极客时间为例，看看极客时间官网返回的 Content-Type 值是什么。在终端输入以下命令：`")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("curl "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("I")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("https")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token regex"}},[n("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("time.geekbang.org")]),n("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("​ "),n("img",{attrs:{src:t(348),alt:"Algolia搜索"}})]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'从图中可以看到，响应头中的 Content-type 字段的值是 text/html，这就是告诉浏览器，服务器返回的数据是 HTML 格式'")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("``接下来我们再来利用 curl 来请求极客时间安装包的地址，如下所示：`")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("curl "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("I")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("https")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("res001"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("geekbang"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("org"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("apps"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("geektime"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("android"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("official"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("geektime_2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.1_20190527")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("2136_offical"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("apk\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("​ "),n("img",{attrs:{src:t(349),alt:"Algolia搜索"}})]),s._v(" "),n("p",[n("strong",[s._v("注意：")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("从返回的响应头信息来看，其 Content"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Type 的值是 application"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("octet"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("stream，显示数据是字节流类型的，通常情况下，浏览器会按照下载类型来处理该请求。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("需要注意的是，如果服务器配置 Content"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Type 不正确，比如将 text"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("html 类型配置成 application"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("octet"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("stream 类型，那么浏览器可能会曲解文件内容，比如会将一个本来是用来展示的页面，变成了一个下载文件。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v("所以，不同 Content"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Type 的后续处理流程也截然不同。如果 Content"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Type 字段的值被浏览器判断为下载类型，那么该请求会被提交给浏览器的下载管理器，同时该 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("URL")]),s._v(" 请求的导航流程就此结束。但如果是 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTML")]),s._v("，那么浏览器则会继续进行导航流程。由于 Chrome 的页面渲染是运行在渲染进程中的，所以接下来就需要准备渲染进程了。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("strong",[s._v("3.准备渲染进程")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("默认情况下，Chrome 会为每个页面分配一个渲染进程，也就是说，每打开一个新页面就会配套创建一个新的渲染进程。但是，也有一些例外，在某些情况下，浏览器会让多个页面直接运行在同一个渲染进程中。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("``比如我从极客时间的首页里面打开了另外一个页面——算法训练营，我们看下图的 Chrome 的任务管理器截图：`")]),s._v(" "),n("p",[s._v("​ "),n("img",{attrs:{src:t(350),alt:"Algolia搜索"}})]),s._v(" "),n("p",[s._v("``从图中可以看出，打开的这三个页面都是运行在同一个渲染进程中，进程 ID 是 23601。`")]),s._v(" "),n("h3",{attrs:{id:"_5-2同一站点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-2同一站点"}},[s._v("#")]),s._v(" 5.2同一站点")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("那什么情况下多个页面会同时运行在一个渲染进程中呢？\n要解决这个问题，我们就需要先了解下什么是同一站点（same"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("site）。具体地讲，我们将“同一站点”定义为根域名（例如，geekbang"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("org）加上协议（例如，https"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" 或者 http"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("），还包含了该根域名下的所有子域名和不同的端口，比如下面这三个：\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("https")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("geekbang"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("org\n"),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("https")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("www"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("geekbang"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("org\n"),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("https")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("www"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("geekbang"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("org"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("``它们都是属于同一站点，因为它们的协议都是 HTTPS，而且根域名也都是 geekbang.org。`")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("Chrome 的默认策略是，每个标签对应一个渲染进程。但如果从一个页面打开了另一个新页面，而新页面和当前页面属于同一站点的话，那么新页面会复用父页面的渲染进程。官方把这个默认策略叫 process"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("per"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("site"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("instance。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h3",{attrs:{id:"_5-3打开一个新的页面采用的渲染进程策略"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-3打开一个新的页面采用的渲染进程策略"}},[s._v("#")]),s._v(" 5.3打开一个新的页面采用的渲染进程策略")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("打开一个新页面采用的渲染进程策略就是：\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("通常情况下，打开新的页面都会使用单独的渲染进程；\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("如果从 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v(" 页面打开 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("B")]),s._v(" 页面，且 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v(" 和 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("B")]),s._v(" 都属于同一站点的话，那么 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("B")]),s._v(" 页面复用 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v(" 页面的渲染进程；\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v("如果是其他情况，浏览器进程则会为 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("B")]),s._v(" 创建一个新的渲染进程。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.")]),s._v("渲染进程准备好之后，还不能立即进入文档解析状态，因为此时的文档数据还在网络进程中，并没有提交给渲染进程，所以下一步就进入了提交文档阶段\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[n("strong",[s._v("4.提交文档")])]),s._v(" "),n("p",[s._v("``所谓提交文档，就是指浏览器进程将网络进程接收到的 HTML 数据提交给渲染进程，具体流程是这样的：`")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("首先当浏览器进程接收到网络进程的响应头数据之后，便向渲染进程发起“提交文档”的消息；\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("渲染进程接收到“提交文档”的消息后，会和网络进程建立传输数据的“管道”；\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v("等文档数据传输完成之后，渲染进程会返回“确认提交”的消息给浏览器进程；\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.")]),s._v("浏览器进程在收到“确认提交”的消息后，会更新浏览器界面状态，包括了安全状态、地址栏的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("URL")]),s._v("、前进后退的历史状态，并更新 Web 页面。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("``其中，当渲染进程确认提交之后，更新内容如下图所示：`")]),s._v(" "),n("p",[s._v("​ "),n("img",{attrs:{src:t(351),alt:"Algolia搜索"}})]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("这也就解释了为什么在浏览器的地址栏里面输入了一个地址后，之前的页面没有立马消失，而是要加载一会儿才会更新页面。\n到这里，一个完整的导航流程就“走”完了，这之后就要进入渲染阶段了。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("5.渲染阶段")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("一旦文档被提交，渲染进程便开始页面解析和子资源加载了，关于这个阶段的完整过程，我会在下一篇文章中来专门介绍。这里你只需要先了解一旦页面生成完成，渲染进程会发送一个消息给浏览器进程，浏览器接收到消息后，会停止标签图标上的加载动画。如下所示：\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("​ "),n("img",{attrs:{src:t(352),alt:"Algolia搜索"}})]),s._v(" "),n("h2",{attrs:{id:"_6-渲染流程-上-html、css和javascript-是如何变成页面的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-渲染流程-上-html、css和javascript-是如何变成页面的"}},[s._v("#")]),s._v(" 6.渲染流程（上）：HTML、CSS和JavaScript，是如何变成页面的？")]),s._v(" "),n("p",[s._v("``这中间的"),n("strong",[s._v("渲染模块")]),s._v("就是我们今天要讨论的主题。为了能更好地理解下文，你可以先结合下图快速抓住 HTML、CSS 和 JavaScript 的含义：`\n​ "),n("img",{attrs:{src:t(353),alt:"Algolia搜索"}})]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("由于渲染机制过于复杂，所以渲染模块在执行过程中会被划分为很多子阶段，输入的\n"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTML")]),s._v(" 经过这些子阶段，最后输出像素。我们把这样的一个处理流程叫做渲染流水线，其\n大致流程如下图所示：\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("​ "),n("img",{attrs:{src:t(354),alt:"Algolia搜索"}})]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("按照渲染的时间顺序，流水线可分为如下几个子阶段：构建 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DOM")]),s._v(" 树、样式计算、布局阶\n段、分层、绘制、分块、光栅化和合成。内容比较多，我会用两篇文章来为你详细讲解这各\n个子阶段。接下来，在介绍每个阶段的过程中，你应该重点关注以下三点内容：\n开始每个子阶段都有其输入的内容；\n然后每个子阶段有其处理过程；\n最终每个子阶段会生成输出内容。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h3",{attrs:{id:"_1-构建dom树"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-构建dom树"}},[s._v("#")]),s._v(" "),n("strong",[s._v("1.构建DOM树")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("为什么要构建 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DOM")]),s._v(" 树呢？这是因为浏览器无法直接理解和使用 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTML")]),s._v("，所以需要将\n"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTML")]),s._v(" 转换为浏览器能够理解的结构——"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DOM")]),s._v(" 树。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("​ "),n("img",{attrs:{src:t(355),alt:"Algolia搜索"}})]),s._v(" "),n("p",[s._v("``其中每个点我们称为节点，相连的节点称为父子节点`\n​ "),n("img",{attrs:{src:t(356),alt:"Algolia搜索"}})]),s._v(" "),n("h3",{attrs:{id:"_2-样式计算-recalculate-style"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-样式计算-recalculate-style"}},[s._v("#")]),s._v(" "),n("strong",[s._v("2.样式计算（Recalculate Style）")])]),s._v(" "),n("p",[s._v("``样式计算的目的是为了计算出 DOM 节点中每个元素的具体样式，这个阶段大体可分为三\n步来完成。`")]),s._v(" "),n("h4",{attrs:{id:"_2-1-把-css-转换为浏览器能够理解的结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-把-css-转换为浏览器能够理解的结构"}},[s._v("#")]),s._v(" "),n("strong",[s._v("2.1  把 CSS 转换为浏览器能够理解的结构")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("和 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTML")]),s._v(" 文件一样，浏览器也是无法直接理解这些纯文本的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CSS")]),s._v(" 样式，所以当渲染引擎接\n收到 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CSS")]),s._v(" 文本时，会执行一个转换操作，将 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CSS")]),s._v(" 文本转换为浏览器可以理解的结构——\nstyleSheets。\n为了加深理解，你可以在 Chrome 控制台中查看其结构，只需要在控制台中输入\ndocument"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("styleSheets，然后就看到如下图所示的结构：\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("​ "),n("img",{attrs:{src:t(357),alt:"Algolia搜索"}}),s._v("\n​ "),n("img",{attrs:{src:t(358),alt:"Algolia搜索"}})]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("从图中可以看出，这个样式表包含了很多种样式，已经把那三种来源的样式都包含进去了。当然样式表的具体结构不是我们今天讨论的重点，你只需要知道渲染引擎会把获取到的"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CSS")]),s._v(" 文本全部转换为 styleSheets 结构中的数据，并且该结构同时具备了查询和修改功能，这会为后面的样式操作提供基础。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h4",{attrs:{id:"_2-2转换样式表中的属性值-使其标准化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2转换样式表中的属性值-使其标准化"}},[s._v("#")]),s._v(" "),n("strong",[s._v("2. 2转换样式表中的属性值，使其标准化")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("现在我们已经把现有的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CSS")]),s._v(" 文本转化为浏览器可以理解的结构了，那么接下来就要对其进\n行属性值的标准化操作。\n要理解什么是属性值标准化，你可以看下面这样一段 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CSS")]),s._v(" 文本：\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("div",{staticClass:"language-html line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[s._v("body { font-size: 2em }\np {color:blue;}\nspan {display: none}\ndiv {font-weight: bold}\ndiv p {color:green;}\ndiv {color:red; }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("可以看到上面的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CSS")]),s._v(" 文本中有很多属性值，如 2em、blue、bold，这些类型数值不容易被渲染引擎理解，所以需要将所有值转换为渲染引擎容易理解的、标准化的计算值，这个过程就是属性值标准化。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("​ "),n("img",{attrs:{src:t(359),alt:"Algolia搜索"}})]),s._v(" "),n("h4",{attrs:{id:"_2-3-计算出-dom-树中每个节点的具体样式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-计算出-dom-树中每个节点的具体样式"}},[s._v("#")]),s._v(" "),n("strong",[s._v("2. 3 计算出 DOM 树中每个节点的具体样式")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("现在样式的属性已被标准化了，接下来就需要计算 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DOM")]),s._v(" 树中每个节点的样式属性了，如\n何计算呢？\n这就涉及到 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CSS")]),s._v(" 的继承规则和层叠规则了。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("首先是 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CSS")]),s._v(" 继承。"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CSS")]),s._v(" 继承就是每个 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DOM")]),s._v(" 节点都包含有父节点的样式。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("样式计算过程中的第二个规则是样式层叠。层叠是 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CSS")]),s._v(" 的一个基本特征，它是一个定义了\n如何合并来自多个源的属性值的算法。它在 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CSS")]),s._v(" 处于核心地位，"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CSS")]),s._v(" 的全称“层叠样式\n表\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v("总之，样式计算阶段的目的是为了计算出 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DOM")]),s._v(" 节点中每个元素的具体样式，在计算过程\n中需要遵守 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CSS")]),s._v(" 的继承和层叠两个规则。这个阶段最终输出的内容是每个 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DOM")]),s._v(" 节点的样\n式，并被保存在 ComputedStyle 的结构内。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h3",{attrs:{id:"_3-布局阶段"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-布局阶段"}},[s._v("#")]),s._v(" "),n("strong",[s._v("3.布局阶段")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("现在，我们有 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DOM")]),s._v(" 树和 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DOM")]),s._v(" 树中元素的样式，但这还不足以显示页面，因为我们还不\n知道 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DOM")]),s._v(" 元素的几何位置信息。那么接下来就需要计算出 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DOM")]),s._v(" 树中可见元素的几何位\n置，我们把这个计算过程叫做布局。\nChrome 在布局阶段需要完成两个任务：创建布局树和布局计算。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h4",{attrs:{id:"_3-1-创建布局树"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-创建布局树"}},[s._v("#")]),s._v(" 3.1 创建布局树")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("`你可能注意到了 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DOM")]),s._v(" 树还含有很多不可见的元素，比如 head 标签，还有使用了\n"),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("display")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("none 属性的元素。所以在显示之前，我们还要额外地构建一棵只包含可见元素布\n局树。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("`为了构建布局树，浏览器大体上完成了下面这些工作：\n遍历 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DOM")]),s._v(" 树中的所有可见节点，并把这些节点加到布局中；\n而不可见的节点会被布局树忽略掉，如 head 标签下面的全部内容，再比如\nbody"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("p"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("span 这个元素，因为它的属性包含 dispaly"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("none，所以这个元素也没有被包进\n布局树。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("​ "),n("img",{attrs:{src:t(360),alt:"Algolia搜索"}})]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("`从图中可以看出，本节内容我们介绍了渲染流程的前三个阶段："),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DOM")]),s._v(" 生成、样式计算和布局。要点可大致总结为如下：在 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTML")]),s._v(" 页面内容被提交给渲染引擎之后，渲染引擎首先将 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTML")]),s._v(" 解析为浏览器可以理解的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DOM")]),s._v("；然后根据 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CSS")]),s._v(" 样式表，计算出 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DOM")]),s._v(" 树所有节点的样式；接着又计算每个元素的几何坐标位置，并将这些信息保存在布局树中。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h4",{attrs:{id:"_3-2布局计算"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-2布局计算"}},[s._v("#")]),s._v(" 3.2布局计算")]),s._v(" "),n("p",[n("strong",[s._v("渲染流水线大总结")]),s._v("\n​ "),n("img",{attrs:{src:t(361),alt:"Algolia搜索"}})]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("结合上图，一个完整的渲染流程大致可总结为如下：\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 渲染进程将 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTML")]),s._v(" 内容转换为能够读懂的"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DOM")]),s._v(" 树结构。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 渲染引擎将 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CSS")]),s._v(" 样式表转化为浏览器可以理解的styleSheets，计算出 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DOM")]),s._v(" 节点的样式。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v(" 创建布局树，并计算元素的布局信息。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.")]),s._v(" 对布局树进行分层，并生成分层树。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5.")]),s._v(" 为每个图层生成绘制列表，并将其提交到合成线程。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6.")]),s._v(" 合成线程将图层分成图块，并在光栅化线程池中将图块转换成位图。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.")]),s._v(" 合成线程发送绘制图块命令DrawQuad给浏览器进程。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.")]),s._v(" 浏览器进程根据 DrawQuad 消息生成页面，并显示到显示器上。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h3",{attrs:{id:"_4-回流-重排"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-回流-重排"}},[s._v("#")]),s._v(" 4.回流(重排)")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//更新了元素的几何属性,就会引起回流，")]),s._v("\n如果你通过 JavaScript 或者 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CSS")]),s._v(" 修改元素的几何位置属性，例如改变元\n素的宽度、高度等，那么浏览器会触发重新布局，解析之后的一系列子阶段，这个过程就叫\n重排。无疑，重排需要更新完整的渲染流水线，所以开销也是最大的。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h3",{attrs:{id:"_5-重绘"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-重绘"}},[s._v("#")]),s._v(" 5.重绘")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//更新元素的绘制属性（重绘）")]),s._v("\n如果修改了元素的背景颜色，那么布局阶段将不会被执行，因为并没有引起几何位置的变换，所以就直接进入了绘制阶段，然后执行之后的一列子阶段，这个过程就叫重绘。相较于重排操作，重绘省去了布局和分层阶段，所以执行效率会比重排操作要高一些。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"_6-直接合成阶段"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-直接合成阶段"}},[s._v("#")]),s._v(" 6.直接合成阶段")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//那如果你更改一个既不要布局也不要绘制的属性，渲染引擎将跳过布局和绘制，只执行后续的合成操作，我们把这个过程叫做合成。")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("​ "),n("img",{attrs:{src:t(362),alt:"Algolia搜索"}})]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("我们使用了 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CSS")]),s._v(" 的 transform 来实现动画效果，这可以避开重排和重绘阶段，直接在非主线程上执行合成动画操作。这样的效率是最高的因为是在非主线程上合成，并没有占用主线程的资源，另外也避开了布局和绘制两个子阶段，所以相对于重绘和重排，合成能大大提升绘制效率。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h3",{attrs:{id:"_7-具体的实践方法能减少重绘、重排呢"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-具体的实践方法能减少重绘、重排呢"}},[s._v("#")]),s._v(" 7.具体的实践方法能减少重绘、重排呢？")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 使用 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" 操作样式，而不是频繁操作 style\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 避免使用 table 布局\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v(" vue "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" react 数据驱动思想 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("我们自己不操作"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DOM")]),s._v("，我们只操作数据，让框架帮我们根据数据渲染视图（框架内部本身对于"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DOM")]),s._v("的回流和重绘以及其它性能优化做的非常好）\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.")]),s._v(" Debounce window resize 事件…\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5.")]),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("分离读写操作（现代浏览器的渲染队列的机制）（重要）")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//现代浏览器中默认增加了“渲染队列的机制”，以此来减少DOM的回流和重绘")]),s._v("\n 遇到一行修改样式的代码，先放到渲染队列中，继续看 下面一行代码 是否还为修改样式的，如果是继续增加到渲染队列中"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("直到下面的代码不再是修改样式的，而是获取样式的代码！此时不再向渲染队列中增加，把之前渲染队列中要修改的样式一次性渲染到页面中，引发一次"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DOM")]),s._v("的回流和重绘 但是有的时候我们还需要浏览器多次回流：例如：先设置动画，渲染后，在去改变样式，让其有动画效果\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6.")]),s._v("元素批量修改（重要）\n文档碎片：临时创建的一个存放文档的容器，我们可以把新创建的"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("LI")]),s._v("，存放到容器中，当所有的"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("LI")]),s._v("都存储完，我们统一把容器中的内容增加到页面中（只触发一次回流）\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])])])}),[],!1,null,null,null);a.default=e.exports}}]);